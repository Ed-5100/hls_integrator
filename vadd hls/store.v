// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
//
// Description: store module, read stream and write to mem
// ===========================================================

`timescale 1 ns / 1 ps

module store (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_address0,
        arr_ce0,
        arr_we0,
        arr_d0,
        a_V_dout,
        a_V_empty_n,
        a_V_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] arr_address0;
output   arr_ce0;
output   arr_we0;
output  [31:0] arr_d0;
input  [31:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arr_ce0;
reg arr_we0;
reg a_V_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln23_fu_61_p2;
wire   [3:0] i_fu_67_p2;
reg    ap_block_state2;
reg   [3:0] i_0_reg_50;
wire   [63:0] zext_ln24_fu_73_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_50 <= i_fu_67_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_50 <= 4'd0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (1'b1 == ap_CS_fsm_state2))) begin
        arr_ce0 = 1'b1;
    end else begin
        arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        arr_we0 = 1'b1;
    end else begin
        arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n)) & (icmp_ln23_fu_61_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((icmp_ln23_fu_61_p2 == 1'd0) & (1'b0 == a_V_empty_n));
end

assign arr_address0 = zext_ln24_fu_73_p1;

assign arr_d0 = a_V_dout;

assign i_fu_67_p2 = (i_0_reg_50 + 4'd1);

assign icmp_ln23_fu_61_p2 = ((i_0_reg_50 == 4'd8) ? 1'b1 : 1'b0);

assign zext_ln24_fu_73_p1 = i_0_reg_50;

endmodule //store
