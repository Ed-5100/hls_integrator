// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// Description: adder module
//  add(stream a, stream b, stream c):
//      for i in range(depth):
//          c[i] = a[i] + b[i]
// ===========================================================

`timescale 1 ns / 1 ps

module add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_dout,
        a_V_empty_n,
        a_V_read,
        b_V_dout,
        b_V_empty_n,
        b_V_read,
        c_V_din,
        c_V_full_n,
        c_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_V_dout;
input   a_V_empty_n;
output   a_V_read;
input  [31:0] b_V_dout;
input   b_V_empty_n;
output   b_V_read;
output  [31:0] c_V_din;
input   c_V_full_n;
output   c_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_read;
reg b_V_read;
reg c_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    a_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln16_fu_62_p2;
reg    b_V_blk_n;
reg    c_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [3:0] i_fu_68_p2;
reg   [3:0] i_reg_83;
reg    ap_block_state2;
wire   [31:0] tmp_2_fu_74_p2;
reg   [31:0] tmp_2_reg_88;
reg   [3:0] i_0_reg_51;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_51 <= i_reg_83;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_51 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_83 <= i_fu_68_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_2_reg_88 <= tmp_2_fu_74_p2;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_blk_n = a_V_empty_n;
    end else begin
        a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_read = 1'b1;
    end else begin
        a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_V_blk_n = b_V_empty_n;
    end else begin
        b_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_V_read = 1'b1;
    end else begin
        b_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_V_blk_n = c_V_full_n;
    end else begin
        c_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_V_write = 1'b1;
    end else begin
        c_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n))) & (icmp_ln16_fu_62_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((c_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = (((icmp_ln16_fu_62_p2 == 1'd0) & (b_V_empty_n == 1'b0)) | ((icmp_ln16_fu_62_p2 == 1'd0) & (1'b0 == a_V_empty_n)));
end

assign c_V_din = tmp_2_reg_88;

assign i_fu_68_p2 = (i_0_reg_51 + 4'd1);

assign icmp_ln16_fu_62_p2 = ((i_0_reg_51 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_2_fu_74_p2 = (b_V_dout + a_V_dout);

endmodule //add
