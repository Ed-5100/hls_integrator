// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
//
// ===========================================================

`timescale 1 ns / 1 ps

(* CORE_GENERATION_INFO="vadd,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.196000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15,HLS_SYN_LUT=102,HLS_VERSION=2019_2_1}" *)

module vadd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_Addr_A,
        in1_EN_A,
        in1_WEN_A,
        in1_Din_A,
        in1_Dout_A,
        in1_Clk_A,
        in1_Rst_A,
        in2_Addr_A,
        in2_EN_A,
        in2_WEN_A,
        in2_Din_A,
        in2_Dout_A,
        in2_Clk_A,
        in2_Rst_A,
        out_r_Addr_A,
        out_r_EN_A,
        out_r_WEN_A,
        out_r_Din_A,
        out_r_Dout_A,
        out_r_Clk_A,
        out_r_Rst_A
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] in1_Addr_A;
output   in1_EN_A;
output  [3:0] in1_WEN_A;
output  [31:0] in1_Din_A;
input  [31:0] in1_Dout_A;
output   in1_Clk_A;
output   in1_Rst_A;
output  [31:0] in2_Addr_A;
output   in2_EN_A;
output  [3:0] in2_WEN_A;
output  [31:0] in2_Din_A;
input  [31:0] in2_Dout_A;
output   in2_Clk_A;
output   in2_Rst_A;
output  [31:0] out_r_Addr_A;
output   out_r_EN_A;
output  [3:0] out_r_WEN_A;
output  [31:0] out_r_Din_A;
input  [31:0] out_r_Dout_A;
output   out_r_Clk_A;
output   out_r_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_EN_A;
reg in2_EN_A;
reg out_r_EN_A;
reg[3:0] out_r_WEN_A;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_88_p2;
reg   [3:0] i_reg_110;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln13_fu_94_p1;
reg   [63:0] zext_ln13_reg_115;
wire   [0:0] icmp_ln12_fu_82_p2;
reg   [3:0] i_0_reg_71;
wire    ap_CS_fsm_state3;
wire   [31:0] in1_Addr_A_orig;
wire   [31:0] in2_Addr_A_orig;
wire   [31:0] out_r_Addr_A_orig;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_71 <= i_reg_110;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_71 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_110 <= i_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_82_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_115[3 : 0] <= zext_ln13_fu_94_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in1_EN_A = 1'b1;
    end else begin
        in1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in2_EN_A = 1'b1;
    end else begin
        in2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_EN_A = 1'b1;
    end else begin
        out_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_WEN_A = 4'd15;
    end else begin
        out_r_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_82_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_fu_88_p2 = (i_0_reg_71 + 4'd1);

assign icmp_ln12_fu_82_p2 = ((i_0_reg_71 == 4'd8) ? 1'b1 : 1'b0);

assign in1_Addr_A = in1_Addr_A_orig << 32'd2;

assign in1_Addr_A_orig = zext_ln13_fu_94_p1;

assign in1_Clk_A = ap_clk;

assign in1_Din_A = 32'd0;

assign in1_Rst_A = ap_rst;

assign in1_WEN_A = 4'd0;

assign in2_Addr_A = in2_Addr_A_orig << 32'd2;

assign in2_Addr_A_orig = zext_ln13_fu_94_p1;

assign in2_Clk_A = ap_clk;

assign in2_Din_A = 32'd0;

assign in2_Rst_A = ap_rst;

assign in2_WEN_A = 4'd0;

assign out_r_Addr_A = out_r_Addr_A_orig << 32'd2;

assign out_r_Addr_A_orig = zext_ln13_reg_115;

assign out_r_Clk_A = ap_clk;

assign out_r_Din_A = (in1_Dout_A + in2_Dout_A);

assign out_r_Rst_A = ap_rst;

assign zext_ln13_fu_94_p1 = i_0_reg_71;

always @ (posedge ap_clk) begin
    zext_ln13_reg_115[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //vadd
